"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
from typing import cast
from decouple import config
from dj_database_url import parse as durl
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#! SECRET_KEY = 'django-insecure-v@)t^xc=_%1eztc_mfoiy+ysf)vd%9gb@)a5lea_pfwd4*-+_l'
SECRET_KEY =config('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
#!DEBUG = True
DEBUG =config('DEBUG')
#ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['127.0.0.1','.localhost', 'eatingfish.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # created apps ==> python manage.py startapp "name_of_app" 
    'rest_framework',
    'rest_framework.authtoken',
    "corsheaders",
    'ticket',
    'job',
    'meal'
]

####### --------- golobal and for each view -------- ######
'''
 1] - global
    - BasicAuthentication => sing in each once is not used real
    - tokens and keys  --> is used in real life    

'''
REST_FRAMEWORK = {
    
 #'DEFAULT_AUTHENTICATION_CLASSES': 
 #['rest_framework.authentication.TokenAuthentication',],
 #'DEFAULT_AUTHENTICATION_CLASSES': 
 # ['rest_framework.authentication.BasicAuthentication',],
 #'DEFAULT_PERMISSION_CLASSES': 
 # ['rest_framework.permissions.IsAuthenticated',]

}
####### --------- golobal and for each view -------- ######
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    "corsheaders.middleware.CorsMiddleware",
    

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
default_dburl = 'sqlite:///'+os.path.join(BASE_DIR ,'db.sqlite3')
## ! original data base 
## ! DATABASES = {
## !     'default': {
## !         'ENGINE': 'django.db.backends.sqlite3',
## !         'NAME': BASE_DIR / 'db.sqlite3',
## !     }
## ! }

## ! database for Heroku
DATABASES = {
    'default':config('DATABASE_URL',default=default_dburl,cast=durl )
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT =os.path.join(BASE_DIR ,"static")
#######  --------------- for static files --------###
STATICFILES_DIRS = [
   
    os.path.join(BASE_DIR ,"static")  
]
MEDIA_ROOT =os.path.join(BASE_DIR ,"media")
MEDIA_URL='/media/'
#######  --------------- for static files --------###

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True


'''
   -- link of library :- has detailed explains:-
         https://pypi.org/project/django-cors-headers/
         command to install django-cors-headers:-
               pip install django-cors-headers

  The same-origin policy
      [1] Cross-origin resource sharing (CORS) :-
            is a mechanism that allows
            restricted resources on a web page to be requested from another
            domain outside the domain from which the first resource was served.
           
      2] CORS defines :- 
            a way in which a browser and server can interact to determine 
            whether it is safe to allow the cross-origin request.
            It allows for more freedom and functionality than purely same-origin requests,
            but is more secure than simply allowing all cross-origin requests.    
      
      3] does the same-origin policy block all cross-origin requests?  
           nope! , embedding Javascript, CSS, and images from origins is always
           allowed, as well as some POST requests (like form submissions). But, 
           for example, making an arbitrary GET request to an HTTP API isn't.    
'''